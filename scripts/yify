#!/bin/bash
set -e
API="https://yts.mx/api/v2"
GENRES=("fantasy" "family" "drama" "documentary" "crime" "comedy" "biography" "animation" "adventure" "action" "reality-tv" "romance" "history" "horror" "film-noir" "game-show" "mystery" "news" "music" "musical" "western" "war" "thriller" "talk-show" "sport" "sci-fi")

declare -A HELP
HELP[main]='Yify is a quick tool to get info about movies. Have fun!

Usage:

        yify <command> [arguments]

Commands:

        movies    show list of all movies
        download  show list of all movies
        <genre>   show list of all movies of that genre
        genres    show list of all available genres
        search    show list of movies by a search query
        suggest   show list of suggested movies by movie id
        <id>      show movie details of a movie by movie id
        rand      show movie details of a random movie
        help      show this message

Use "yify help <command>" for more information about a command.

Author:

github.com/espinosajuanma'

# TO DO: Handle errors
# API return it has .status ('ok' or 'error') and .status_message
# Only if .status is 'ok' it is going to have .data

# ---- CMD: suggest

HELP[suggest]='usage: yify suggest <id>

Show a list of movies suggestion from a specific movie id.'

movie_suggestions() {
  curl -s -G "$API/movie_suggestions.json" \
    --data-urlencode "movie_id=$1" \
    | parse_list
}

# ---- CMD: movies

HELP[movies]='usage: yify <movies|(genre)> [page_number]

Show a list of movies order from latest to oldest.'

list_movies() {
  page=1
  genre="$1"
  test ! -z "$2" && page="$2"
  curl -s -G "$API/list_movies.json" \
    --data-urlencode "page=$page" \
    --data-urlencode "genre=$genre" \
    | parse_list
}

# ---- CMD: search

HELP[search]='usage: yify search <query>

Show a list of movies that match the query.'

search() {
  query="$*"
  curl -s -G "$API/list_movies.json" \
    --data-urlencode "query_term=$query"\
    | parse_list
}

# ---- CMD: movie

HELP[movie]='usage: yify movie <id>

Show details of a specific movie id.'

get_movie() {
  curl -G -s "$API/movie_details.json" \
    --data-urlencode "movie_id=$1" \
    | show_movie
}

# ---- CMD: movie

HELP[download]='usage: yify download <id>

Start downloading torrent file.'

download_movie() {
  link="$(curl -G -s "$API/movie_details.json" \
    --data-urlencode "movie_id=$1" \
    | get_torrent)"
  transmission-cli "$link"
}

# ---- CMD: genres

HELP[genres]='usage: yify genres

Show a list of all available genres.'

show_genres() {
  printf "\e[31mMovie Genres 🍿\e[0m\n"
  for i in ${GENRES[*]}; do echo "- $i"; done
}

# ---- CMD: rand

HELP[rand]='usage: yify rand

Select a random movie and show details.'

rand_movie() {
  count="$(curl -s -G "$API/list_movies.json" | jq '.data.movie_count')"
  yify "$((1 + RANDOM % count))"
}

# ---- CMD: help

HELP[help]='usage: yify help [command]

Show a list of commands or usage of a specific one.'

show_help() {
  test -z "$1" && echo "${HELP[main]}" && exit
  [[ "${HELP[$1]:+exists}" ]] && echo "${HELP[$1]}" && exit
  if [[ "${GENRES[*]}" =~ $1 ]]; then
    echo "${HELP[movies]}" && exit
  fi

  echo "$1 command doesn't exist"
}

# ---- UTILS

parse_genre() {
  if [[ "${GENRES[*]}" =~ $1 ]]; then
    list_movies "$@" && exit
  fi
  get_movie "$@" && exit
}

parse_list() {
  jq -r '"\u001b[31m"+"Page: "+(if .data.page_number > 0 then .data.page_number|tostring else "1" end)+" - "+"Movies: "+(.data.movie_count|tostring),
  (.data.movies[] | "\u001b[35m["+.language+"] 🎬 \u001b[36m("+(.year|tostring)+") \u001b[32m"+.title+" \u001b[0m["+(.id|tostring)+"]")'
}

show_movie() {
  jq -r \
    '"\u001b[32m\u001b[1m"+.data.movie.title + "\u001b[0m\u001b[31m ("+(.data.movie.year|tostring)+") 🌟\u001b[33m"+(.data.movie.rating|tostring)+" \u001b[32m["+(.data.movie.id|tostring)+"]",
  "\u001b[0m\u001b[36m  • \u001b[0myify: \u001b[4m\u001b[36m"+.data.movie.url,
  "\u001b[0m\u001b[36m  • \u001b[0mIMDb: \u001b[4m\u001b[36mhttps://www.imdb.com/title/"+.data.movie.imdb_code,
  "\u001b[0m\u001b[36m  • \u001b[0mTrailer: \u001b[4m\u001b[36mhttps://www.youtube.com/watch?v="+.data.movie.yt_trailer_code,
  "",
  "\u001b[0m\u001b[35mGenres: "+(.data.movie.genres|join(", ")),
  "",
  "\u001b[0m"+.data.movie.description_full'
}

get_torrent() {
  jq -r '.data.movie.torrents[-1].url'
}

# ---- MAIN

command="$1"
case "$command" in
  "help") show_help "$2" && exit;;
  "movies") list_movies "" "$2" && exit;;
  "movie") get_movie "$2" && exit;;
  "download") download_movie "$2" && exit;;
  "search") search "${@:2}" && exit;;
  "genres") show_genres && exit;;
  "suggest") movie_suggestions "$2" && exit;;
  "rand") rand_movie && exit;;
  *) parse_genre "${@:1}";;
esac
